client.py:
import socket
import cv2
import pickle
import struct
import imutils
from picamera.array import PiRGBArray
from picamera import PiCamera

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host_name = socket.gethostname()
host_ip = '192.168.21.159'  # Enter the Cache Server IP address
print('HOST IP:', host_ip)
port = 9999
socket_address = (host_ip, port)
server_socket.connect(socket_address)

camera = PiCamera()
camera.resolution = (640, 480)
camera.framerate = 24
raw_capture = PiRGBArray(camera, size=(640, 480))

try:
    print('Connected to Cache Server.')
    for frame in camera.capture_continuous(raw_capture, format="bgr", use_video_port=True):
        image = frame.array
        image = imutils.resize(image, width=320)
        frame_data = pickle.dumps(image)
        message = struct.pack("Q", len(frame_data)) + frame_data
        server_socket.sendall(message)
        cv2.imshow("TRANSMITTING TO CACHE SERVER", image)
        key = cv2.waitKey(1) & 0xFF
        raw_capture.truncate(0)
        if key == ord('q'):
            break
except Exception as e:
    print("Error:", str(e))
finally:
    server_socket.close()
    camera.close()
    cv2.destroyAllWindows()

server.py:

import socket
import cv2
import pickle
import struct
import threading
from ultralytics import YOLO  #used for object detection
from ultralytics.yolo.v8.detect.predict import DetectionPredictor

model = YOLO("yolov5s.pt")  
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host_name = socket.gethostname()
#host_ip = socket.gethostbyname(host_name)
host_ip = '192.168.21.159'
print('HOST IP:', host_ip)
port = 9999
socket_address = (host_ip, port)
server_socket.bind(socket_address)
server_socket.listen()
print("Listening at", socket_address)

global frame
frame = None


def start_video_stream():
    global frame
    client_socket, addr = server_socket.accept()
    data = b""
    payload_size = struct.calcsize("Q")
    while True:
        while len(data) < payload_size:
            packet = client_socket.recv(4 * 1024)
            if not packet:
                break
            data += packet
        packed_msg_size = data[:payload_size]
        data = data[payload_size:]
        msg_size = struct.unpack("Q", packed_msg_size)[0]

        while len(data) < msg_size:
            data += client_socket.recv(4 * 1024)
        frame_data = data[:msg_size]
        data = data[msg_size:]
        frame = pickle.loads(frame_data)
        results = model.predict(source=frame,show=True)
        cv2.imshow("RECEIVING VIDEO FROM DRONE", frame)
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break
    client_socket.close()


thread = threading.Thread(target=start_video_stream, args=())
thread.start()

def serve_client(addr, client_socket):
    global frame
    try:
        print('CLIENT {} CONNECTED!'.format(addr))
        if client_socket:
            while True:
                a = pickle.dumps(frame)
                message = struct.pack("Q", len(a)) + a
                client_socket.sendall(message)
    except Exception as e:
        print(f"CLIENT {addr} DISCONNECTED")
    finally:
        client_socket.close()

while True:
    client_socket, addr = server_socket.accept()
    print(addr)
    thread = threading.Thread(target=serve_client, args=(addr, client_socket))
    thread.start()
    print("TOTAL CLIENTS ", threading.activeCount() - 2)  # edited here because one thread is already started before
